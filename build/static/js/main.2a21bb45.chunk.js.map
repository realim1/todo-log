{"version":3,"sources":["components/todo-log-item/todo-log-item.component.jsx","components/input-list/input-list.component.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["TodoLogItem","logItem","onComplete","onRemove","useState","activeNav","setActiveNav","Card","className","Header","Nav","variant","defaultActiveKey","Item","Link","href","onClick","Body","style","minHeight","item","Title","todos","length","map","todo","index","Text","Button","size","completed","blockers","blocker","buildCardBody","Footer","date","InputList","label","updateParent","values","setValues","FormGroup","controlId","FormLabel","value","FormControl","type","onChange","e","i","newValues","target","handleChange","splice","removeFields","addFields","App","setTodos","completeds","setCompleteds","setBlockers","showAddItemModal","setShowAddItemModal","closeShowAddItemModal","todoLogs","setTodoLogs","newLogs","logIndex","findIndex","completedTodoItem","push","axios","delete","_id","then","res","data","useEffect","get","Container","Modal","show","Form","onSubmit","Date","formatedDate","getMonth","getDate","getFullYear","preventDefault","newLog","filter","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a21bb45.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Nav, Button } from \"react-bootstrap\";\nimport { Trash } from \"react-bootstrap-icons\";\n\nimport \"./todo-log-item.style.scss\";\n\nconst TodoLogItem = ({ logItem, onComplete, onRemove }) => {\n\tconst [activeNav, setActiveNav] = useState(\"todos\");\n\n\tconst buildCardBody = (item) => {\n\t\tswitch (activeNav) {\n\t\t\tcase \"todos\":\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Card.Title>Todos</Card.Title>\n\t\t\t\t\t\t{item.todos.length > 0 ? (\n\t\t\t\t\t\t\tlogItem.todos.map((todo, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Card.Text key={index}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant='outline-success'\n\t\t\t\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => onComplete(logItem, index)}>\n\t\t\t\t\t\t\t\t\t\t\tCompleted\n\t\t\t\t\t\t\t\t\t\t</Button>{\" \"}\n\t\t\t\t\t\t\t\t\t\t- {todo}\n\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Card.Text>No todo tasks</Card.Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\tcase \"completed\":\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Card.Title>Completed</Card.Title>\n\t\t\t\t\t\t{item.completed.length > 0 ? (\n\t\t\t\t\t\t\tlogItem.completed.map((completed, index) => {\n\t\t\t\t\t\t\t\treturn <Card.Text key={index}>- {completed}</Card.Text>;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Card.Text>No completed tasks</Card.Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\tcase \"blockers\":\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Card.Title>Blockers</Card.Title>\n\t\t\t\t\t\t{item.blockers.length > 0 ? (\n\t\t\t\t\t\t\tlogItem.blockers.map((blocker, index) => {\n\t\t\t\t\t\t\t\treturn <Card.Text key={index}>- {blocker}</Card.Text>;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Card.Text>No blockers</Card.Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\treturn (\n\t\t<Card className='mb-4'>\n\t\t\t<Card.Header>\n\t\t\t\t<Nav variant='pills' defaultActiveKey='#todos'>\n\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t<Nav.Link href='#todos' onClick={() => setActiveNav(\"todos\")}>\n\t\t\t\t\t\t\tTodos\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\thref='#completed'\n\t\t\t\t\t\t\tonClick={() => setActiveNav(\"completed\")}>\n\t\t\t\t\t\t\tCompleted\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t<Nav.Link href='#blockers' onClick={() => setActiveNav(\"blockers\")}>\n\t\t\t\t\t\t\tBlockers\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t<Nav.Link onClick={() => onRemove(logItem)}>\n\t\t\t\t\t\t\t<Trash className='text-danger' />\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t</Nav.Item>\n\t\t\t\t</Nav>\n\t\t\t</Card.Header>\n\t\t\t<Card.Body style={{ minHeight: \"200px\" }}>\n\t\t\t\t{buildCardBody(logItem)}\n\t\t\t</Card.Body>\n\t\t\t<Card.Footer className='text-muted text-center'>\n\t\t\t\t{logItem.date}\n\t\t\t</Card.Footer>\n\t\t</Card>\n\t);\n};\n\nexport default TodoLogItem;\n","import React, { useState } from \"react\";\nimport { FormGroup, FormControl, FormLabel, Button } from \"react-bootstrap\";\n\nimport \"./input-list.style.scss\";\n\nconst InputList = ({ label, updateParent }) => {\n\tconst [values, setValues] = useState([\"\"]);\n\n\tconst handleChange = (values, setValues, i, e) => {\n\t\tlet newValues = [...values];\n\t\tnewValues[i] = e.target.value;\n\t\tsetValues(newValues);\n\t\tupdateParent(newValues);\n\t};\n\n\tconst addFields = (values, setValues) => {\n\t\tsetValues([...values, \"\"]);\n\t};\n\n\tconst removeFields = (values, setValues, i) => {\n\t\tlet newValues = [...values];\n\t\tnewValues.splice(i, 1);\n\t\tsetValues(newValues);\n\t};\n\treturn (\n\t\t<FormGroup className='mb-3' controlId='formAddTodo'>\n\t\t\t<FormLabel>{label}</FormLabel>\n\t\t\t{values.map((value, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className='d-block'>\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tclassName='mb-3 w-75 d-inline-block'\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tonChange={(e) => handleChange(values, setValues, index, e)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{index ? (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tvariant='danger'\n\t\t\t\t\t\t\t\tonClick={() => removeFields(values, setValues, index)}>\n\t\t\t\t\t\t\t\tRemove -\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<Button onClick={() => addFields(values, setValues)}>Add +</Button>\n\t\t</FormGroup>\n\t);\n};\n\nexport default InputList;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Button, Modal, Form } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nimport TodoLogItem from \"./components/todo-log-item/todo-log-item.component\";\nimport InputList from \"./components/input-list/input-list.component\";\nimport \"./App.scss\";\n\nfunction App() {\n\tconst [todos, setTodos] = useState([\"\"]);\n\tconst [completeds, setCompleteds] = useState([\"\"]);\n\tconst [blockers, setBlockers] = useState([\"\"]);\n\n\tconst [showAddItemModal, setShowAddItemModal] = useState(false);\n\tconst closeShowAddItemModal = () => setShowAddItemModal(false);\n\tconst [todoLogs, setTodoLogs] = useState([]);\n\n\tconst onComplete = (logItem, index) => {\n\t\tlet newLogs = [...todoLogs];\n\t\tconst logIndex = newLogs.findIndex((item) => item === logItem);\n\t\tconst completedTodoItem = newLogs[logIndex].todos[index];\n\n\t\tnewLogs[logIndex].todos.splice(index, 1);\n\t\tnewLogs[logIndex].completed.push(completedTodoItem);\n\n\t\tsetTodoLogs(newLogs);\n\t};\n\n\tconst onRemove = (logItem) => {\n\t\taxios\n\t\t\t.delete(\"http://localhost:5000/removeTodoLog/\" + logItem._id)\n\t\t\t.then((res) => {\n\t\t\t\tsetTodoLogs(res.data);\n\t\t\t});\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\tconst date = new Date();\n\n\t\tconst formatedDate =\n\t\t\tdate.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n\n\t\te.preventDefault();\n\t\tconst newLog = {\n\t\t\tdate: formatedDate,\n\t\t\ttodos: todos.filter((item) => item),\n\t\t\tcompleted: completeds.filter((item) => item),\n\t\t\tblockers: blockers.filter((item) => item),\n\t\t};\n\t\taxios.post(\"http://localhost:5000/addTodoLog\", newLog).then((res) => {\n\t\t\tsetTodoLogs(res.data);\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\taxios.get(\"http://localhost:5000/getTodoLogs\").then((res) => {\n\t\t\tsetTodoLogs(res.data);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<Container>\n\t\t\t<header className='my-3'>Todo Log</header>\n\t\t\t<Button\n\t\t\t\tclassName='text-center w-100 mb-3'\n\t\t\t\tonClick={() => setShowAddItemModal(true)}>\n\t\t\t\tAdd Log Item +\n\t\t\t</Button>\n\t\t\t{todoLogs.map((logItem, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TodoLogItem\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tlogItem={logItem}\n\t\t\t\t\t\tonComplete={onComplete}\n\t\t\t\t\t\tonRemove={onRemove}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<Modal show={showAddItemModal}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>Log Form</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t<InputList label='Todos' updateParent={setTodos} />\n\t\t\t\t\t\t<InputList label='Completed' updateParent={setCompleteds} />\n\t\t\t\t\t\t<InputList label='Blockers' updateParent={setBlockers} />\n\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t<Button variant='secondary' onClick={closeShowAddItemModal}>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\tonClick={closeShowAddItemModal}>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Modal.Footer>\n\t\t\t\t</Form>\n\t\t\t</Modal>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}